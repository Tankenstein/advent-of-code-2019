$input: 1, 0, 0, 3, 1, 1, 2, 3, 1, 3, 4, 3, 1, 5, 0, 3, 2, 1, 13, 19, 1, 9, 19, 23, 2, 13, 23, 27, 2,
  27, 13, 31, 2, 31, 10, 35, 1, 6, 35, 39, 1, 5, 39, 43, 1, 10, 43, 47, 1, 5, 47, 51, 1, 13, 51, 55,
  2, 55, 9, 59, 1, 6, 59, 63, 1, 13, 63, 67, 1, 6, 67, 71, 1, 71, 10, 75, 2, 13, 75, 79, 1, 5, 79,
  83, 2, 83, 6, 87, 1, 6, 87, 91, 1, 91, 13, 95, 1, 95, 13, 99, 2, 99, 13, 103, 1, 103, 5, 107, 2,
  107, 10, 111, 1, 5, 111, 115, 1, 2, 115, 119, 1, 119, 6, 0, 99, 2, 0, 14, 0;

$ADD: 1;
$MULTIPLY: 2;
$HALT: 99;

@function set-n($list, $index, $value) {
  @return set-nth($list, $index + 1, $value);
}

@function n($list, $index) {
  @return nth($list, $index + 1);
}

@function run($tape, $noun, $verb) {
  $state: set-n(set-n($tape, 1, $noun), 2, $verb);

  $index: 0;
  @while true {
    $operation: n($state, $index);

    @if $operation == $ADD {
      $arg-1: n($state, n($state, $index + 1));
      $arg-2: n($state, n($state, $index + 2));
      $value-position: n($state, $index + 3);

      $state: set-n($state, $value-position, $arg-1 + $arg-2);
    } @else if $operation == $MULTIPLY {
      $arg-1: n($state, n($state, $index + 1));
      $arg-2: n($state, n($state, $index + 2));
      $value-position: n($state, $index + 3);

      $state: set-n($state, $value-position, $arg-1 * $arg-2);
    } @else if $operation == $HALT {
      @return n($state, 0);
    } @else {
      @debug $operation;
      @error "unknown operation";
    }

    $index: $index + 4;
  }
}

@function find-noun-verb($tape, $value) {
  @for $i from 0 to 100 {
    @for $j from 0 to 100 {
      $result: run($tape, $i, $j);
      @if $result == $value {
        @return 100 * $i + $j;
      }
    }
  }
}

#answer-1 {
  margin: run($input, 12, 2);
}

#answer-2 {
  margin: find-noun-verb($input, 19690720);
}
